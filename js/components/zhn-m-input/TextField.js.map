{"version":3,"sources":["../../../src/components/zhn-m-input/TextField.jsx"],"names":["HAS_TOUCH","has","CL","SELECT","LABEL","DIV","INPUT","INPUT_LINE","INPUT_MSG_ERR","S","LABEL_TO_INPUT","transform","BT_CLEAR","position","top","right","LABEL_ON_ERROR","color","LINE_ERROR","borderBottom","_isFn","fn","TextField","props","_hFocusInput","isFocus","forceUpdate","_hBlurInput","_hInputChange","event","value","target","setState","isPassTest","isOnTest","onTest","_hKeyDown","keyCode","isOnEnter","onEnter","_hClear","id","initValue","_id","_value","state","render","style","maxLength","hasClear","autoCapitalize","caption","errorMsg","_labelStyle","_labelErrStyle","_lineStyle","getValue","String","trim","Component","defaultProps"],"mappings":"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","sourcesContent":["import { Component } from 'react'\r\n\r\nimport has from '../has'\r\nimport SvgX from '../zhn-atoms/SvgX'\r\n\r\nimport crId from '../../utils/crId'\r\n\r\nconst { HAS_TOUCH } = has\r\n\r\nconst CL = {\r\n  SELECT: 'm-select',\r\n  LABEL: 'm-select__label',\r\n  DIV: 'm-textfield-input__div',\r\n  INPUT: 'm-textfield-input',\r\n  INPUT_LINE: 'm-input__line',\r\n  INPUT_MSG_ERR: 'm-input__msg-err'\r\n};\r\n\r\nconst S = {\r\n  LABEL_TO_INPUT: {\r\n     transform: 'scale(1) translate(0px, -6px)'\r\n  },\r\n  BT_CLEAR: {\r\n    position: 'absolute',\r\n    top: 25,\r\n    right: 12\r\n  },\r\n  LABEL_ON_ERROR: {\r\n    color: '#f44336'\r\n  },\r\n  LINE_ERROR: {\r\n    borderBottom: '2px solid #F44336'\r\n  }\r\n};\r\n\r\nconst _isFn = fn => typeof fn === 'function';\r\n\r\nclass TextField extends Component {\r\n  static defaultProps = {\r\n    maxLength: \"20\",\r\n    autoCapitalize: \"off\",\r\n    hasClear: true\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    const { id, initValue, onTest, onEnter } = props;\r\n    this._id = id || crId()\r\n    this.isFocus = false;\r\n    this.isOnTest = _isFn(onTest)\r\n    this.isOnEnter = _isFn(onEnter)\r\n    const _value = initValue || '';\r\n    this.state = {\r\n      value: _value,\r\n      isPassTest: this.isOnTest ? onTest(_value) : true\r\n    }\r\n  }\r\n\r\n  _hFocusInput = () => {\r\n    this.isFocus = true\r\n    this.forceUpdate()\r\n  }\r\n  _hBlurInput = () => {\r\n    this.isFocus = false\r\n    this.forceUpdate()\r\n  }\r\n\r\n  _hInputChange = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({\r\n      value,\r\n      isPassTest: this.isOnTest\r\n        ? this.props.onTest(value)\r\n        : true\r\n    })\r\n  }\r\n _hKeyDown = (event) => {\r\n   const { keyCode } = event;\r\n   if (keyCode === 46 || keyCode === 27){\r\n     this.setState({ value: '' })\r\n   } else if (keyCode === 13 && this.isOnEnter) {\r\n     this.props.onEnter(event.target.value)\r\n   }\r\n }\r\n\r\n _hClear = () => {\r\n   this.setState({ value: '' })\r\n }\r\n\r\n  render(){\r\n    const {\r\n      style, maxLength, hasClear,\r\n      autoCapitalize,\r\n      caption, errorMsg=''\r\n    } = this.props\r\n    , { value, isPassTest } = this.state\r\n    , _labelStyle = (value || this.isFocus)\r\n        ? void 0\r\n        : S.LABEL_TO_INPUT\r\n    , _labelErrStyle = isPassTest\r\n        ? void 0\r\n        : S.LABEL_ON_ERROR\r\n    , _lineStyle = isPassTest\r\n        ? void 0\r\n        : S.LINE_ERROR;\r\n\r\n    return (\r\n      <div\r\n        className={CL.SELECT}\r\n        style={style}\r\n      >\r\n        <label\r\n          className={CL.LABEL}\r\n          style={{..._labelStyle, ..._labelErrStyle}}\r\n          htmlFor={this._id}\r\n         >\r\n          {caption}\r\n        </label>\r\n        <div className={CL.DIV}>\r\n          <input\r\n            id={this._id}\r\n            type=\"text\"\r\n            className={CL.INPUT}\r\n            value={value}\r\n            autoComplete=\"off\"\r\n            autoCorrect=\"off\"\r\n            autoCapitalize={autoCapitalize}\r\n            spellCheck=\"false\"\r\n            translate=\"false\"\r\n            maxLength={maxLength}\r\n            onFocus={this._hFocusInput}\r\n            onBlur={this._hBlurInput}\r\n            onChange={this._hInputChange}\r\n            onKeyDown={this._hKeyDown}\r\n          />\r\n          {HAS_TOUCH && hasClear && value && <SvgX\r\n             color=\"black\"\r\n             className=\"svg-clear\"\r\n             style={S.BT_CLEAR}\r\n             onClick={this._hClear}\r\n          />}\r\n          <div className={CL.INPUT_LINE} style={_lineStyle} />\r\n          { _lineStyle && <div className={CL.INPUT_MSG_ERR}>{errorMsg}</div>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getValue(){\r\n    return String(this.state.value).trim();\r\n  }\r\n}\r\n\r\nexport default TextField\r\n"],"file":"TextField.js"}