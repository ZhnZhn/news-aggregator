{"version":3,"sources":["../../../src/components/zhn-m-input/PasswordField.jsx"],"names":["CL","SELECT","LABEL","DIV","INPUT","BT_CLEAR","INPUT_LINE","INPUT_MSG_ERR","S","LABEL_TO_INPUT","transform","position","top","right","color","fontWeight","LABEL_ON_ERROR","LINE_ERROR","borderBottom","LINE_AFTER_ENTER","_crId","name","Math","random","toString","substr","PasswordField","props","_hFocusInput","isFocus","forceUpdate","_hBlurInput","_hInputChange","event","setState","value","target","trim","_hClear","_clearAttrValue","_clearId","setTimeout","_input","hasAttribute","removeAttribute","_clearWasEnter","_wasEnter","_hKeyDown","keyCode","stopPropagation","preventDefault","onEnter","_isValue","_refInput","node","_id","state","componentWillUnmound","clearTimeout","render","rootStyle","caption","maxLength","errorMsg","onTest","_isPassTest","_labelStyle","_labelErrStyle","_lineStyle","has","HAS_TOUCH","componentDidUpdate","setWasEnter","getValue","clear","Component","defaultProps"],"mappings":"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","sourcesContent":["import { Component } from 'react'\r\n\r\nimport has from '../has'\r\n\r\nconst CL = {\r\n  SELECT: 'm-select',\r\n  LABEL: 'm-select__label',\r\n  DIV: 'm-textfield-input__div',\r\n  INPUT: 'm-textfield-input',\r\n  BT_CLEAR: 'm-textfield__bt-clear',\r\n  INPUT_LINE: 'm-input__line',\r\n  INPUT_MSG_ERR: 'm-input__msg-err'\r\n};\r\n\r\nconst S = {\r\n  LABEL_TO_INPUT: {\r\n     transform: 'scale(1) translate(0px, -6px)'\r\n  },\r\n  BT_CLEAR: {\r\n    position: 'absolute',\r\n    top: 28,\r\n    right: 12,\r\n    color: '#2f7ed8',\r\n    fontWeight: 'bold'\r\n  },\r\n  LABEL_ON_ERROR: {\r\n    color: '#f44336'\r\n  },\r\n  LINE_ERROR: {\r\n    borderBottom: '2px solid #f44336'\r\n  },\r\n  LINE_AFTER_ENTER: {\r\n    borderBottom: '2px solid greenyellow'\r\n  }\r\n};\r\n\r\nconst _crId = ({ name }) => name\r\n  + '_'\r\n  + Math.random().toString(36).substr(2, 6);\r\n\r\nclass PasswordField extends Component {\r\n  static defaultProps = {\r\n    name: 'pwd',\r\n    maxLength: \"32\",\r\n    errorMsg: '',\r\n    onTest: () => true,\r\n    onEnter: () => {}\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this._wasEnter = false\r\n    this.isFocus = false\r\n    this._id = _crId(props)\r\n    this.state = {\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  componentWillUnmound() {\r\n    clearTimeout(this._clearId)\r\n  }\r\n\r\n  _hFocusInput = () => {\r\n    this.isFocus = true\r\n    this.forceUpdate()\r\n  }\r\n  _hBlurInput = () => {\r\n    this.isFocus = false\r\n    this.forceUpdate()\r\n  }\r\n\r\n  _hInputChange = (event) => {\r\n    this.setState({\r\n      value: event.target.value.trim(),\r\n    })\r\n  }\r\n  _hClear = () => {\r\n    this.setState({ value: '' })\r\n  }\r\n\r\n  _clearAttrValue = () => {\r\n    this._clearId = setTimeout(() => {\r\n      const _input = this._input;\r\n      if (_input && _input.hasAttribute('value')) {\r\n        _input.removeAttribute('value')\r\n      }\r\n    })\r\n  }\r\n\r\n  _clearWasEnter = () => {\r\n    this._wasEnter = false\r\n  }\r\n\r\n _hKeyDown = (event) => {\r\n   if (event.keyCode === 46){\r\n     this.setState({ value: '' })\r\n   } else if (event.keyCode === 13) {\r\n     event.stopPropagation()\r\n     event.preventDefault()\r\n     this.props.onEnter(event.target.value)\r\n     this._wasEnter = true\r\n     this.forceUpdate(this._clearWasEnter)\r\n   }\r\n }\r\n _isValue = () => {\r\n    return this._input\r\n       ? !!this._input.value\r\n       : false;\r\n }\r\n\r\n _refInput = node => this._input = node\r\n\r\n  render(){\r\n    const {\r\n        rootStyle, caption,\r\n        name,\r\n        maxLength, errorMsg,\r\n        onTest\r\n      } = this.props\r\n    , { value } = this.state\r\n    , _isPassTest = onTest(value)\r\n    , _labelStyle = (this._isValue() || this.isFocus)\r\n        ? null\r\n        : S.LABEL_TO_INPUT\r\n    , _labelErrStyle = _isPassTest\r\n        ? null\r\n        : S.LABEL_ON_ERROR\r\n    , _lineStyle = _isPassTest\r\n        ? this._wasEnter\r\n             ? S.LINE_AFTER_ENTER\r\n             : void 0\r\n        : S.LINE_ERROR;\r\n    return (\r\n      <div\r\n        className={CL.SELECT}\r\n        style={rootStyle}\r\n      >\r\n        <label\r\n          className={CL.LABEL}\r\n          style={{..._labelStyle, ..._labelErrStyle}}\r\n          htmlFor={this._id}\r\n         >\r\n          {caption}\r\n        </label>\r\n        <div className={CL.DIV}>\r\n          <input\r\n            hidden={true}\r\n            autoComplete=\"username\"\r\n            value={name}\r\n            readOnly={true}\r\n          />\r\n          <input\r\n            ref = {this._refInput}\r\n            id={this._id}\r\n            type=\"password\"\r\n            autoComplete=\"current-password\"\r\n            className={CL.INPUT}\r\n            maxLength={maxLength}\r\n            value={value}\r\n            onChange={this._hInputChange}\r\n            onKeyDown={this._hKeyDown}\r\n            onFocus={this._hFocusInput}\r\n            onBlur={this._hBlurInput}\r\n          />\r\n          {\r\n            has.HAS_TOUCH && value && <button\r\n             className={CL.BT_CLEAR}\r\n             onClick={this._hClear}\r\n            >x</button>\r\n          }\r\n          <div className={CL.INPUT_LINE} style={_lineStyle} />\r\n          {\r\n             !_isPassTest && <div className={CL.INPUT_MSG_ERR}>\r\n                 {errorMsg}\r\n               </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this._clearAttrValue()\r\n  }\r\n\r\n  setWasEnter(){\r\n    this._wasEnter = true\r\n    this.forceUpdate(this._clearWasEnter)\r\n  }\r\n\r\n  getValue(){\r\n    return this._input && this._input.value;\r\n  }\r\n\r\n  clear(){\r\n    this.setState({ value: ''}, this.setWasEnter)\r\n  }\r\n}\r\n\r\nexport default PasswordField\r\n"],"file":"PasswordField.js"}