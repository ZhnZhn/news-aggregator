{"version":3,"sources":["../../../src/components/zhn-containers/ComponentHrzContainer.jsx"],"names":["CL","isInCont","utils","ComponentHrzContainer","state","containers","_onStore","actionType","option","Comp","props","addAction","setState","prevState","unshift","componentDidMount","store","unsubscribe","listen","componentWillUnmount","render","Component"],"mappings":";;;;;;;;;;;AAAA;;AAGA;;AAFA;AAIA,IAAMA,EAAE,GAAG,eAAX;IACQC,Q,GAAaC,iB,CAAbD,Q;;IAEFE,qB;;;;;;;;;;;UASJC,K,GAAQ;AACNC,MAAAA,UAAU,EAAE;AADN,K;;UAYRC,Q,GAAW,UAACC,UAAD,EAAaC,MAAb,EAAwB;AAAA,iBACfA,MAAM,IAAI,EADK;AAAA,UACxBC,IADwB,QACxBA,IADwB;;AAEhC,UAAIF,UAAU,KAAK,MAAKG,KAAL,CAAWC,SAA1B,IAAuCF,IAA3C,EAAgD;AAC9C,cAAKG,QAAL,CAAc,UAAAC,SAAS,EAAI;AACzB,cAAI,CAACZ,QAAQ,CAACY,SAAS,CAACR,UAAX,EAAuBI,IAAvB,CAAb,EAA2C;AACzCI,YAAAA,SAAS,CAACR,UAAV,CAAqBS,OAArB,CAA6BL,IAA7B;AACD;;AACD,iBAAOI,SAAP;AACD,SALD;AAMD;AACH,K;;;;;;;SAlBDE,iB,GAAA,6BAAmB;AAAA,QACTC,KADS,GACC,KAAKN,KADN,CACTM,KADS;AAEjB,SAAKC,WAAL,GAAmBD,KAAK,CAACE,MAAN,CAAa,KAAKZ,QAAlB,CAAnB;AACD,G;;SACDa,oB,GAAA,gCAAsB;AACpB,SAAKF,WAAL;AACD,G;;SAcDG,M,GAAA,kBAAQ;AAAA,QACEf,UADF,GACiB,KAAKD,KADtB,CACEC,UADF;AAEN,wBACG;AAAK,MAAA,SAAS,EAAEL,EAAhB;AAAA,gBACGK;AADH,MADH;AAKD,G;;;EAxCiCgB,gB;;eA2CrBlB,qB","sourcesContent":["import { Component } from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nimport utils from './utils'\r\n\r\nconst CL = \"hrz-container\";\r\nconst { isInCont } = utils;\r\n\r\nclass ComponentHrzContainer extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func\r\n    }),\r\n    addAction: PropTypes.string\r\n  }\r\n  */\r\n  state = {\r\n    containers: []\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { store } = this.props;\r\n    this.unsubscribe = store.listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n\r\n  _onStore = (actionType, option) => {\r\n     const { Comp } = option || {};\r\n     if (actionType === this.props.addAction && Comp){\r\n       this.setState(prevState => {\r\n         if (!isInCont(prevState.containers, Comp)) {\r\n           prevState.containers.unshift(Comp)\r\n         }\r\n         return prevState;\r\n       })\r\n     }\r\n  }\r\n\r\n  render(){\r\n    const { containers } = this.state;\r\n    return (\r\n       <div className={CL}>\r\n         {containers}\r\n       </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentHrzContainer\r\n"],"file":"ComponentHrzContainer.js"}