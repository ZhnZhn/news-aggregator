{"version":3,"sources":["../../src/utils/fn.js"],"names":["FREQUENCY_RESTRICTION","MSG_FREQUENCY_RESTRICTION","MSG_LOAD_RESTRICTION","_recentUri","_msLastFetch","fnFetch","uri","optionFetch","option","onCheckResponse","onFetch","onCompleted","onFailed","onCatch","_msNow","Date","now","msg","fetch","then","response","status","statusText","Promise","all","resolve","json","error"],"mappings":";;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,qBAAqB,GAAG,IAA9B;AACA,IAAMC,yBAAyB,GAAG,8DAAlC;AACA,IAAMC,oBAAoB,GAAG,sDAA7B;;AACA,IAAIC,UAAJ;;AACA,IAAIC,YAAJ;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAQb;AAAA,MAPAC,GAOA,QAPAA,GAOA;AAAA,MAPKC,WAOL,QAPKA,WAOL;AAAA,MANAC,MAMA,QANAA,MAMA;AAAA,MALAC,eAKA,QALAA,eAKA;AAAA,MAJAC,OAIA,QAJAA,OAIA;AAAA,MAHAC,WAGA,QAHAA,WAGA;AAAA,MAFAC,QAEA,QAFAA,QAEA;AAAA,MADAC,OACA,QADAA,OACA;;AACD,MAAMC,MAAM,GAAGC,IAAI,CAACC,GAAL,EAAf;;AACA,MAAKF,MAAM,GAAGV,YAAT,GAAwBJ,qBAA7B,EAAqD;AACnD,QAAKG,UAAU,KAAKG,GAApB,EAA0B;AACxBM,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,GAAG,EAAEhB;AAAP,OAAD,CAAR;AACD,KAFD,MAEO;AACLW,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,GAAG,EAAEf;AAAP,OAAD,CAAR,CADK,CAEL;AACD;AACF,GAPD,MAOO;AACLC,IAAAA,UAAU,GAAGG,GAAb;AACAF,IAAAA,YAAY,GAAGU,MAAf;AACAI,IAAAA,KAAK,CAACZ,GAAD,EAAMC,WAAN,CAAL,CACGY,IADH,CACQ,UAAAC,QAAQ,EAAI;AAAA,UACRC,MADQ,GACeD,QADf,CACRC,MADQ;AAAA,UACAC,UADA,GACeF,QADf,CACAE,UADA;;AAEhB,UAAID,MAAM,KAAK,GAAf,EAAoB;AAClB,cAAM;AACJJ,UAAAA,GAAG,iBAAeI;AADd,SAAN;AAGD,OAJD,MAIO,IAAIA,MAAM,IAAE,GAAR,IAAeA,MAAM,GAAC,GAA1B,EAA8B;AACnC,cAAM;AACJJ,UAAAA,GAAG,sBAAqBI,MAArB,WAAiCC;AADhC,SAAN;AAGD,OAJM,MAIA;AACL,eAAOC,OAAO,CAACC,GAAR,CAAY,CACjBD,OAAO,CAACE,OAAR,CAAgBJ,MAAhB,CADiB,EAEjBD,QAAQ,CAACM,IAAT,EAFiB,CAAZ,CAAP;AAID;AACF,KAjBH,EAkBGP,IAlBH,CAkBQ,iBAAqB;AAAA,UAAnBE,MAAmB;AAAA,UAAXK,IAAW;;AACxB,UAAIjB,eAAe,CAACiB,IAAD,EAAOlB,MAAP,CAAnB,EAAkC;AAChC;AACAE,QAAAA,OAAO,CAAC;AAAEgB,UAAAA,IAAI,EAAJA,IAAF;AAAQlB,UAAAA,MAAM,EAANA,MAAR;AAAgBG,UAAAA,WAAW,EAAXA;AAAhB,SAAD,CAAP;AACD;AACH,KAvBH,WAwBS,UAACgB,KAAD,EAAW;AACfd,MAAAA,OAAO,CAAC;AAAEc,QAAAA,KAAK,EAALA,KAAF;AAASnB,QAAAA,MAAM,EAANA,MAAT;AAAiBI,QAAAA,QAAQ,EAARA;AAAjB,OAAD,CAAP;AACF,KA1BH;AA2BA;AACH,CAhDD;;eAkDeP,O","sourcesContent":["//const LIMIT_REMAINING = 'X-RateLimit-Remaining';\r\n\r\n/*\r\nconst _fnMsg400 = (option) => {\r\n  if (option.loadId === \"EU_STAT\"){\r\n    return '400 : Bad request.\\nDataset contains no data. One or more filtering elements (query parameters) are probably invalid.\\nMaybe try request with older date.';\r\n  } else {\r\n    return '400 : Bad request';\r\n  }\r\n}\r\n*/\r\n\r\nconst FREQUENCY_RESTRICTION = 5000;\r\nconst MSG_FREQUENCY_RESTRICTION = 'Time request frequency restriction.\\n1 Request per 5 second.'\r\nconst MSG_LOAD_RESTRICTION = 'Request has already loaded.\\n1 Request per 5 second.';\r\nlet _recentUri;\r\nlet _msLastFetch;\r\n\r\nconst fnFetch = function({\r\n   uri, optionFetch,\r\n   option,\r\n   onCheckResponse,\r\n   onFetch,\r\n   onCompleted,\r\n   onFailed,\r\n   onCatch\r\n }){\r\n  const _msNow = Date.now();\r\n  if ( _msNow - _msLastFetch < FREQUENCY_RESTRICTION ) {\r\n    if ( _recentUri !== uri ) {\r\n      onFailed({ msg: MSG_FREQUENCY_RESTRICTION })\r\n    } else {\r\n      onFailed({ msg: MSG_LOAD_RESTRICTION })\r\n      //onCompleted({ json: {}, option })\r\n    }\r\n  } else {\r\n    _recentUri = uri;\r\n    _msLastFetch = _msNow;\r\n    fetch(uri, optionFetch)\r\n      .then(response => {\r\n        const { status, statusText } = response;\r\n        if (status === 404) {\r\n          throw {\r\n            msg: `Not Found ${status}`\r\n          };\r\n        } else if (status>=500 && status<600){\r\n          throw {\r\n            msg : `Response Error ${status} : ${statusText}`\r\n          };\r\n        } else {\r\n          return Promise.all([\r\n            Promise.resolve(status),\r\n            response.json()\r\n          ]);\r\n        }\r\n      })\r\n      .then(([status, json ]) => {\r\n         if (onCheckResponse(json, option)){\r\n           //option.limitRemaining = limitRemaining;\r\n           onFetch({ json, option, onCompleted });\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         onCatch({ error, option, onFailed })\r\n      })\r\n   }\r\n}\r\n\r\nexport default fnFetch\r\n"],"file":"fn.js"}